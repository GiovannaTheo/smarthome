<?xml version="1.0" encoding="UTF-8"?>
<thing:thing-descriptions xmlns:thing="http://eclipse.org/smarthome/schemas/thing-description/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" bindingId="iota" xsi:schemaLocation="http://eclipse.org/smarthome/schemas/thing-description/v1.0.0 http://eclipse.org/smarthome/schemas/thing-description-1.0.0.xsd">
   <!-- IOTA Binding -->
   <thing-type id="topic" extensible="text,number,percentage,onoff,textPayment">
      <supported-bridge-type-refs>
          <bridge-type-ref id="bridge"/>
      </supported-bridge-type-refs>
      <label>Topic</label>
      <description>This thing represents a topic</description>
      <config-description>
         <parameter name="root" type="text">
            <label>Root Address</label>
            <description>The root address from which item states should be retrieved from</description>
         </parameter>
         <parameter name="refresh" type="integer" min="5">
            <label>Refresh interval</label>
            <description>Specifies the refresh interval in seconds.</description>
         </parameter>
         <parameter name="mode" type="text">
            <options>
                <option value="public">Public</option>
                <option value="private">Private</option>
                <option value="restricted">Restricted</option>
            </options>
            <label>MAM Mode</label>
            <description>The mode of the channel on which to fetch data</description>
        </parameter>
        <parameter name="key" type="text">
            <label>Private Key</label>
            <description>Leave blank for non-restricted mode, otherwise enter the private key you want to use</description>
         </parameter>
      </config-description>
   </thing-type>
   
   <channel-type id="textPayment">
        <item-type>String</item-type>
        <label>New payment</label>
        <state readOnly="true"> </state>
        <config-description>
        <parameter name="root" type="text" required="true">
            <label>Root Address</label>
            <description>The root address from which item states should be retrieved from</description>
         </parameter>
         <parameter name="key" type="text" required="true">
            <label>Private Key For Handshake Packet</label>
            <description>The private key used by the data provider for the first data stream</description>
         </parameter>
         <parameter name="ownkey" type="text" required="false">
            <label>Private Key For Next Messages</label>
            <description>Here you can choose your own private key that will be used by the data provider (only data shared by the io.iota bundle) for the next pushes. If left blank, the password will remain the provider's one</description>
         </parameter>
         <parameter name="threshold" type="decimal">
            <label>Threshold in Miota</label>
            <description>Specifies the threshold under which you agree automatic payments to be made.</description>
            <default>0.0</default>
         </parameter>
        </config-description>
    </channel-type>
   
   <channel-type id="text">
        <item-type>String</item-type>
        <label>Text value</label>
        <state readOnly="true"> </state>
        <config-description>
            <parameter name="stateTopic" type="text" required="true">
                <label>IOTA state topic</label>
                <description>An IOTA topic that this thing will subscribe to, to receive the state (e.g. humidity). If set to ANY, any data matcing the item type will be used as state source</description>
                <default>ANY</default>
            </parameter>
            <parameter name="transformationPattern" type="text">
                <label>Transformation pattern</label>
                <description>Any supported transformation can be used. An example for a received JSON from a IOTA state topic would be a pattern of JSONPATH:$.thingNumber.status.state for a json [{"NAME": name, "STATUS": { "TOPIC": topic, "STATE": state, "TIME": time }}]. If used, the topic is ignored, and the state will be the value pointed by the transformation pattern.</description>
                <default></default>
                <advanced>true</advanced>
            </parameter>
        </config-description>
    </channel-type>

    <channel-type id="number">
        <item-type>Number</item-type>
        <label>Number value</label>
        <state readOnly="true" pattern="%.3f"> </state>
        <config-description>
            <parameter name="stateTopic" type="text" required="true">
                <label>IOTA state topic</label>
                <description>An IOTA topic that this thing will subscribe to, to receive the state (e.g. humidity). If set to ANY, any data matcing the item type will be used as state source</description>
                <default>ANY</default>
            </parameter>
            <parameter name="transformationPattern" type="text">
                <label>Transformation pattern</label>
                <description>Any supported transformation can be used. An example for a received JSON from a IOTA state topic would be a pattern of JSONPATH:$.thingNumber.status.state for a json [{"NAME": name, "STATUS": { "TOPIC": topic, "STATE": state, "TIME": time }}]. If used, the topic is ignored, and the state will be the value pointed by the transformation pattern.</description>
                <default></default>
                <advanced>true</advanced>
            </parameter>
            
            <parameter name="step" type="decimal">
                <label>Step value</label>
                <description>The step value is used if the value channel is bound to a Dimmer item and an increase/decrease is issued</description>
                <default>10.0</default>
            </parameter>
            <parameter name="isfloat" type="boolean">
                <label>Is Decimal?</label>
                <description>Set to true if the IOTA topic expects a float/double decimal instead of an integer value</description>
                <default>false</default>
            </parameter>
        </config-description>
    </channel-type>

    <channel-type id="percentage">
        <item-type>Dimmer</item-type>
        <label>Percentage value</label>
        <state readOnly="true" pattern="%.2f %"> </state>
        <config-description>
            <parameter name="stateTopic" type="text" required="true">
                <label>IOTA state topic</label>
                <description>An IOTA topic that this thing will subscribe to, to receive the state (e.g. humidity). If set to ANY, any data matcing the item type will be used as state source</description>
                <default>ANY</default>
            </parameter>
            <parameter name="transformationPattern" type="text">
                <label>Transformation pattern</label>
                <description>Any supported transformation can be used. An example for a received JSON from a IOTA state topic would be a pattern of JSONPATH:$.thingNumber.status.state for a json [{"NAME": name, "STATUS": { "TOPIC": topic, "STATE": state, "TIME": time }}]. If used, the topic is ignored, and the state will be the value pointed by the transformation pattern.</description>
                <default></default>
                <advanced>true</advanced>
            </parameter>

            <parameter name="min" type="decimal">
                <label>Minimum value</label>
                <description>Minimum value to convert the IOTA state to a percentage</description>
                <default>0.0</default>
            </parameter>
            <parameter name="max" type="decimal">
                <label>Maximum value</label>
                <description>Maximum value to convert the IOTA state to a percentage</description>
                <default>100.0</default>
            </parameter>
            <parameter name="step" type="decimal">
                <label>Step value</label>
                <description>The step value is used if the value channel is bound to a Dimmer item and an increase/decrease is issued</description>
                <default>10.0</default>
            </parameter>
            <parameter name="isfloat" type="boolean">
                <label>Is Decimal?</label>
                <description>Set to true if the IOTA topic expects a float/double decimal instead of an integer value</description>
                <default>false</default>
            </parameter>
        </config-description>
    </channel-type>

    <channel-type id="onoff">
        <item-type>Switch</item-type>
        <label>On/Off value</label>
        <state readOnly="true"> </state>
        <config-description>
            <parameter name="stateTopic" type="text" required="true">
                <label>IOTA state topic</label>
                <description>An IOTA topic that this thing will subscribe to, to receive the state (e.g. humidity). If set to ANY, any data matcing the item type will be used as state source</description>
                <default>ANY</default>
            </parameter>
            <parameter name="transformationPattern" type="text">
                <label>Transformation pattern</label>
                <description>Any supported transformation can be used. An example for a received JSON from a IOTA state topic would be a pattern of JSONPATH:$.thingNumber.status.state for a json [{"NAME": name, "STATUS": { "TOPIC": topic, "STATE": state, "TIME": time }}]. If used, the topic is ignored, and the state will be the value pointed by the transformation pattern.</description>
                <default></default>
                <advanced>true</advanced>
            </parameter>

            <parameter name="on" type="text">
                <label>ON value</label>
                <description>A number (like 1, 10) or a string (like ON) that is recognised as on state.</description>
                <default>0</default>
                <advanced>true</advanced>
            </parameter>
            <parameter name="off" type="text">
                <label>OFF value</label>
                <description>A number (like 0, -10) or a string (like OFF) that is recognised as off state.</description>
                <default>1</default>
                <advanced>true</advanced>
            </parameter>
            <parameter name="inverse" type="boolean">
                <label>Inverse</label>
                <description>Inverse the meaning. A received "ON" will switch the thing channel off and vice versa.</description>
                <default>false</default>
                <advanced>true</advanced>
            </parameter>
        </config-description>
    </channel-type>
    
</thing:thing-descriptions>
